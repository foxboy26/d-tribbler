/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Tribbler_types.h"

#include <algorithm>

namespace Tribbler {

int _kTribbleStatusValues[] = {
  TribbleStatus::OK,
  TribbleStatus::EEXISTS,
  TribbleStatus::INVALID_USER,
  TribbleStatus::INVALID_SUBSCRIBETO,
  TribbleStatus::NOT_IMPLEMENTED,
  TribbleStatus::STORE_FAILED,
  TribbleStatus::INTERNAL_FAILURE
};
const char* _kTribbleStatusNames[] = {
  "OK",
  "EEXISTS",
  "INVALID_USER",
  "INVALID_SUBSCRIBETO",
  "NOT_IMPLEMENTED",
  "STORE_FAILED",
  "INTERNAL_FAILURE"
};
const std::map<int, const char*> _TribbleStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kTribbleStatusValues, _kTribbleStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* Tribble::ascii_fingerprint = "65EFF36B45A2A15ED500CE77FF0EDE94";
const uint8_t Tribble::binary_fingerprint[16] = {0x65,0xEF,0xF3,0x6B,0x45,0xA2,0xA1,0x5E,0xD5,0x00,0xCE,0x77,0xFF,0x0E,0xDE,0x94};

uint32_t Tribble::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->userid);
          this->__isset.userid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->posted.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->posted.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readI64(this->posted[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.posted = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->contents);
          this->__isset.contents = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Tribble::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Tribble");

  xfer += oprot->writeFieldBegin("userid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->userid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("posted", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->posted.size()));
    std::vector<int64_t> ::const_iterator _iter5;
    for (_iter5 = this->posted.begin(); _iter5 != this->posted.end(); ++_iter5)
    {
      xfer += oprot->writeI64((*_iter5));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("contents", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->contents);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Tribble &a, Tribble &b) {
  using ::std::swap;
  swap(a.userid, b.userid);
  swap(a.posted, b.posted);
  swap(a.contents, b.contents);
  swap(a.__isset, b.__isset);
}

const char* TribbleResponse::ascii_fingerprint = "EE7AB766979BE7A96DC3788F2ABC0A1B";
const uint8_t TribbleResponse::binary_fingerprint[16] = {0xEE,0x7A,0xB7,0x66,0x97,0x9B,0xE7,0xA9,0x6D,0xC3,0x78,0x8F,0x2A,0xBC,0x0A,0x1B};

uint32_t TribbleResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->tribbles.clear();
            uint32_t _size6;
            ::apache::thrift::protocol::TType _etype9;
            xfer += iprot->readListBegin(_etype9, _size6);
            this->tribbles.resize(_size6);
            uint32_t _i10;
            for (_i10 = 0; _i10 < _size6; ++_i10)
            {
              xfer += this->tribbles[_i10].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.tribbles = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast11;
          xfer += iprot->readI32(ecast11);
          this->status = (TribbleStatus::type)ecast11;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TribbleResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TribbleResponse");

  xfer += oprot->writeFieldBegin("tribbles", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->tribbles.size()));
    std::vector<Tribble> ::const_iterator _iter12;
    for (_iter12 = this->tribbles.begin(); _iter12 != this->tribbles.end(); ++_iter12)
    {
      xfer += (*_iter12).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TribbleResponse &a, TribbleResponse &b) {
  using ::std::swap;
  swap(a.tribbles, b.tribbles);
  swap(a.status, b.status);
  swap(a.__isset, b.__isset);
}

const char* SubscriptionResponse::ascii_fingerprint = "86398F2299656EAB855B1FD290A7B0C1";
const uint8_t SubscriptionResponse::binary_fingerprint[16] = {0x86,0x39,0x8F,0x22,0x99,0x65,0x6E,0xAB,0x85,0x5B,0x1F,0xD2,0x90,0xA7,0xB0,0xC1};

uint32_t SubscriptionResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->subscriptions.clear();
            uint32_t _size13;
            ::apache::thrift::protocol::TType _etype16;
            xfer += iprot->readListBegin(_etype16, _size13);
            this->subscriptions.resize(_size13);
            uint32_t _i17;
            for (_i17 = 0; _i17 < _size13; ++_i17)
            {
              xfer += iprot->readString(this->subscriptions[_i17]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.subscriptions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast18;
          xfer += iprot->readI32(ecast18);
          this->status = (TribbleStatus::type)ecast18;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SubscriptionResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SubscriptionResponse");

  xfer += oprot->writeFieldBegin("subscriptions", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->subscriptions.size()));
    std::vector<std::string> ::const_iterator _iter19;
    for (_iter19 = this->subscriptions.begin(); _iter19 != this->subscriptions.end(); ++_iter19)
    {
      xfer += oprot->writeString((*_iter19));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SubscriptionResponse &a, SubscriptionResponse &b) {
  using ::std::swap;
  swap(a.subscriptions, b.subscriptions);
  swap(a.status, b.status);
  swap(a.__isset, b.__isset);
}

} // namespace
