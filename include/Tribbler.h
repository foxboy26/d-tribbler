/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Tribbler_H
#define Tribbler_H

#include <thrift/TDispatchProcessor.h>
#include "Tribbler_types.h"

namespace Tribbler {

class TribblerIf {
 public:
  virtual ~TribblerIf() {}
  virtual TribbleStatus::type CreateUser(const std::string& userid) = 0;
  virtual TribbleStatus::type AddSubscription(const std::string& userid, const std::string& subscribeto) = 0;
  virtual TribbleStatus::type RemoveSubscription(const std::string& userid, const std::string& subscribeto) = 0;
  virtual TribbleStatus::type PostTribble(const std::string& userid, const std::string& tribbleContents) = 0;
  virtual void GetTribbles(TribbleResponse& _return, const std::string& userid) = 0;
  virtual void GetTribblesBySubscription(TribbleResponse& _return, const std::string& userid) = 0;
  virtual void GetSubscriptions(SubscriptionResponse& _return, const std::string& userid) = 0;
};

class TribblerIfFactory {
 public:
  typedef TribblerIf Handler;

  virtual ~TribblerIfFactory() {}

  virtual TribblerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TribblerIf* /* handler */) = 0;
};

class TribblerIfSingletonFactory : virtual public TribblerIfFactory {
 public:
  TribblerIfSingletonFactory(const boost::shared_ptr<TribblerIf>& iface) : iface_(iface) {}
  virtual ~TribblerIfSingletonFactory() {}

  virtual TribblerIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TribblerIf* /* handler */) {}

 protected:
  boost::shared_ptr<TribblerIf> iface_;
};

class TribblerNull : virtual public TribblerIf {
 public:
  virtual ~TribblerNull() {}
  TribbleStatus::type CreateUser(const std::string& /* userid */) {
    TribbleStatus::type _return = (TribbleStatus::type)0;
    return _return;
  }
  TribbleStatus::type AddSubscription(const std::string& /* userid */, const std::string& /* subscribeto */) {
    TribbleStatus::type _return = (TribbleStatus::type)0;
    return _return;
  }
  TribbleStatus::type RemoveSubscription(const std::string& /* userid */, const std::string& /* subscribeto */) {
    TribbleStatus::type _return = (TribbleStatus::type)0;
    return _return;
  }
  TribbleStatus::type PostTribble(const std::string& /* userid */, const std::string& /* tribbleContents */) {
    TribbleStatus::type _return = (TribbleStatus::type)0;
    return _return;
  }
  void GetTribbles(TribbleResponse& /* _return */, const std::string& /* userid */) {
    return;
  }
  void GetTribblesBySubscription(TribbleResponse& /* _return */, const std::string& /* userid */) {
    return;
  }
  void GetSubscriptions(SubscriptionResponse& /* _return */, const std::string& /* userid */) {
    return;
  }
};

typedef struct _Tribbler_CreateUser_args__isset {
  _Tribbler_CreateUser_args__isset() : userid(false) {}
  bool userid;
} _Tribbler_CreateUser_args__isset;

class Tribbler_CreateUser_args {
 public:

  Tribbler_CreateUser_args() : userid() {
  }

  virtual ~Tribbler_CreateUser_args() throw() {}

  std::string userid;

  _Tribbler_CreateUser_args__isset __isset;

  void __set_userid(const std::string& val) {
    userid = val;
  }

  bool operator == (const Tribbler_CreateUser_args & rhs) const
  {
    if (!(userid == rhs.userid))
      return false;
    return true;
  }
  bool operator != (const Tribbler_CreateUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Tribbler_CreateUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Tribbler_CreateUser_pargs {
 public:


  virtual ~Tribbler_CreateUser_pargs() throw() {}

  const std::string* userid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Tribbler_CreateUser_result__isset {
  _Tribbler_CreateUser_result__isset() : success(false) {}
  bool success;
} _Tribbler_CreateUser_result__isset;

class Tribbler_CreateUser_result {
 public:

  Tribbler_CreateUser_result() : success((TribbleStatus::type)0) {
  }

  virtual ~Tribbler_CreateUser_result() throw() {}

  TribbleStatus::type success;

  _Tribbler_CreateUser_result__isset __isset;

  void __set_success(const TribbleStatus::type val) {
    success = val;
  }

  bool operator == (const Tribbler_CreateUser_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Tribbler_CreateUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Tribbler_CreateUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Tribbler_CreateUser_presult__isset {
  _Tribbler_CreateUser_presult__isset() : success(false) {}
  bool success;
} _Tribbler_CreateUser_presult__isset;

class Tribbler_CreateUser_presult {
 public:


  virtual ~Tribbler_CreateUser_presult() throw() {}

  TribbleStatus::type* success;

  _Tribbler_CreateUser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Tribbler_AddSubscription_args__isset {
  _Tribbler_AddSubscription_args__isset() : userid(false), subscribeto(false) {}
  bool userid;
  bool subscribeto;
} _Tribbler_AddSubscription_args__isset;

class Tribbler_AddSubscription_args {
 public:

  Tribbler_AddSubscription_args() : userid(), subscribeto() {
  }

  virtual ~Tribbler_AddSubscription_args() throw() {}

  std::string userid;
  std::string subscribeto;

  _Tribbler_AddSubscription_args__isset __isset;

  void __set_userid(const std::string& val) {
    userid = val;
  }

  void __set_subscribeto(const std::string& val) {
    subscribeto = val;
  }

  bool operator == (const Tribbler_AddSubscription_args & rhs) const
  {
    if (!(userid == rhs.userid))
      return false;
    if (!(subscribeto == rhs.subscribeto))
      return false;
    return true;
  }
  bool operator != (const Tribbler_AddSubscription_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Tribbler_AddSubscription_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Tribbler_AddSubscription_pargs {
 public:


  virtual ~Tribbler_AddSubscription_pargs() throw() {}

  const std::string* userid;
  const std::string* subscribeto;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Tribbler_AddSubscription_result__isset {
  _Tribbler_AddSubscription_result__isset() : success(false) {}
  bool success;
} _Tribbler_AddSubscription_result__isset;

class Tribbler_AddSubscription_result {
 public:

  Tribbler_AddSubscription_result() : success((TribbleStatus::type)0) {
  }

  virtual ~Tribbler_AddSubscription_result() throw() {}

  TribbleStatus::type success;

  _Tribbler_AddSubscription_result__isset __isset;

  void __set_success(const TribbleStatus::type val) {
    success = val;
  }

  bool operator == (const Tribbler_AddSubscription_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Tribbler_AddSubscription_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Tribbler_AddSubscription_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Tribbler_AddSubscription_presult__isset {
  _Tribbler_AddSubscription_presult__isset() : success(false) {}
  bool success;
} _Tribbler_AddSubscription_presult__isset;

class Tribbler_AddSubscription_presult {
 public:


  virtual ~Tribbler_AddSubscription_presult() throw() {}

  TribbleStatus::type* success;

  _Tribbler_AddSubscription_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Tribbler_RemoveSubscription_args__isset {
  _Tribbler_RemoveSubscription_args__isset() : userid(false), subscribeto(false) {}
  bool userid;
  bool subscribeto;
} _Tribbler_RemoveSubscription_args__isset;

class Tribbler_RemoveSubscription_args {
 public:

  Tribbler_RemoveSubscription_args() : userid(), subscribeto() {
  }

  virtual ~Tribbler_RemoveSubscription_args() throw() {}

  std::string userid;
  std::string subscribeto;

  _Tribbler_RemoveSubscription_args__isset __isset;

  void __set_userid(const std::string& val) {
    userid = val;
  }

  void __set_subscribeto(const std::string& val) {
    subscribeto = val;
  }

  bool operator == (const Tribbler_RemoveSubscription_args & rhs) const
  {
    if (!(userid == rhs.userid))
      return false;
    if (!(subscribeto == rhs.subscribeto))
      return false;
    return true;
  }
  bool operator != (const Tribbler_RemoveSubscription_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Tribbler_RemoveSubscription_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Tribbler_RemoveSubscription_pargs {
 public:


  virtual ~Tribbler_RemoveSubscription_pargs() throw() {}

  const std::string* userid;
  const std::string* subscribeto;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Tribbler_RemoveSubscription_result__isset {
  _Tribbler_RemoveSubscription_result__isset() : success(false) {}
  bool success;
} _Tribbler_RemoveSubscription_result__isset;

class Tribbler_RemoveSubscription_result {
 public:

  Tribbler_RemoveSubscription_result() : success((TribbleStatus::type)0) {
  }

  virtual ~Tribbler_RemoveSubscription_result() throw() {}

  TribbleStatus::type success;

  _Tribbler_RemoveSubscription_result__isset __isset;

  void __set_success(const TribbleStatus::type val) {
    success = val;
  }

  bool operator == (const Tribbler_RemoveSubscription_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Tribbler_RemoveSubscription_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Tribbler_RemoveSubscription_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Tribbler_RemoveSubscription_presult__isset {
  _Tribbler_RemoveSubscription_presult__isset() : success(false) {}
  bool success;
} _Tribbler_RemoveSubscription_presult__isset;

class Tribbler_RemoveSubscription_presult {
 public:


  virtual ~Tribbler_RemoveSubscription_presult() throw() {}

  TribbleStatus::type* success;

  _Tribbler_RemoveSubscription_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Tribbler_PostTribble_args__isset {
  _Tribbler_PostTribble_args__isset() : userid(false), tribbleContents(false) {}
  bool userid;
  bool tribbleContents;
} _Tribbler_PostTribble_args__isset;

class Tribbler_PostTribble_args {
 public:

  Tribbler_PostTribble_args() : userid(), tribbleContents() {
  }

  virtual ~Tribbler_PostTribble_args() throw() {}

  std::string userid;
  std::string tribbleContents;

  _Tribbler_PostTribble_args__isset __isset;

  void __set_userid(const std::string& val) {
    userid = val;
  }

  void __set_tribbleContents(const std::string& val) {
    tribbleContents = val;
  }

  bool operator == (const Tribbler_PostTribble_args & rhs) const
  {
    if (!(userid == rhs.userid))
      return false;
    if (!(tribbleContents == rhs.tribbleContents))
      return false;
    return true;
  }
  bool operator != (const Tribbler_PostTribble_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Tribbler_PostTribble_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Tribbler_PostTribble_pargs {
 public:


  virtual ~Tribbler_PostTribble_pargs() throw() {}

  const std::string* userid;
  const std::string* tribbleContents;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Tribbler_PostTribble_result__isset {
  _Tribbler_PostTribble_result__isset() : success(false) {}
  bool success;
} _Tribbler_PostTribble_result__isset;

class Tribbler_PostTribble_result {
 public:

  Tribbler_PostTribble_result() : success((TribbleStatus::type)0) {
  }

  virtual ~Tribbler_PostTribble_result() throw() {}

  TribbleStatus::type success;

  _Tribbler_PostTribble_result__isset __isset;

  void __set_success(const TribbleStatus::type val) {
    success = val;
  }

  bool operator == (const Tribbler_PostTribble_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Tribbler_PostTribble_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Tribbler_PostTribble_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Tribbler_PostTribble_presult__isset {
  _Tribbler_PostTribble_presult__isset() : success(false) {}
  bool success;
} _Tribbler_PostTribble_presult__isset;

class Tribbler_PostTribble_presult {
 public:


  virtual ~Tribbler_PostTribble_presult() throw() {}

  TribbleStatus::type* success;

  _Tribbler_PostTribble_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Tribbler_GetTribbles_args__isset {
  _Tribbler_GetTribbles_args__isset() : userid(false) {}
  bool userid;
} _Tribbler_GetTribbles_args__isset;

class Tribbler_GetTribbles_args {
 public:

  Tribbler_GetTribbles_args() : userid() {
  }

  virtual ~Tribbler_GetTribbles_args() throw() {}

  std::string userid;

  _Tribbler_GetTribbles_args__isset __isset;

  void __set_userid(const std::string& val) {
    userid = val;
  }

  bool operator == (const Tribbler_GetTribbles_args & rhs) const
  {
    if (!(userid == rhs.userid))
      return false;
    return true;
  }
  bool operator != (const Tribbler_GetTribbles_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Tribbler_GetTribbles_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Tribbler_GetTribbles_pargs {
 public:


  virtual ~Tribbler_GetTribbles_pargs() throw() {}

  const std::string* userid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Tribbler_GetTribbles_result__isset {
  _Tribbler_GetTribbles_result__isset() : success(false) {}
  bool success;
} _Tribbler_GetTribbles_result__isset;

class Tribbler_GetTribbles_result {
 public:

  Tribbler_GetTribbles_result() {
  }

  virtual ~Tribbler_GetTribbles_result() throw() {}

  TribbleResponse success;

  _Tribbler_GetTribbles_result__isset __isset;

  void __set_success(const TribbleResponse& val) {
    success = val;
  }

  bool operator == (const Tribbler_GetTribbles_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Tribbler_GetTribbles_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Tribbler_GetTribbles_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Tribbler_GetTribbles_presult__isset {
  _Tribbler_GetTribbles_presult__isset() : success(false) {}
  bool success;
} _Tribbler_GetTribbles_presult__isset;

class Tribbler_GetTribbles_presult {
 public:


  virtual ~Tribbler_GetTribbles_presult() throw() {}

  TribbleResponse* success;

  _Tribbler_GetTribbles_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Tribbler_GetTribblesBySubscription_args__isset {
  _Tribbler_GetTribblesBySubscription_args__isset() : userid(false) {}
  bool userid;
} _Tribbler_GetTribblesBySubscription_args__isset;

class Tribbler_GetTribblesBySubscription_args {
 public:

  Tribbler_GetTribblesBySubscription_args() : userid() {
  }

  virtual ~Tribbler_GetTribblesBySubscription_args() throw() {}

  std::string userid;

  _Tribbler_GetTribblesBySubscription_args__isset __isset;

  void __set_userid(const std::string& val) {
    userid = val;
  }

  bool operator == (const Tribbler_GetTribblesBySubscription_args & rhs) const
  {
    if (!(userid == rhs.userid))
      return false;
    return true;
  }
  bool operator != (const Tribbler_GetTribblesBySubscription_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Tribbler_GetTribblesBySubscription_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Tribbler_GetTribblesBySubscription_pargs {
 public:


  virtual ~Tribbler_GetTribblesBySubscription_pargs() throw() {}

  const std::string* userid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Tribbler_GetTribblesBySubscription_result__isset {
  _Tribbler_GetTribblesBySubscription_result__isset() : success(false) {}
  bool success;
} _Tribbler_GetTribblesBySubscription_result__isset;

class Tribbler_GetTribblesBySubscription_result {
 public:

  Tribbler_GetTribblesBySubscription_result() {
  }

  virtual ~Tribbler_GetTribblesBySubscription_result() throw() {}

  TribbleResponse success;

  _Tribbler_GetTribblesBySubscription_result__isset __isset;

  void __set_success(const TribbleResponse& val) {
    success = val;
  }

  bool operator == (const Tribbler_GetTribblesBySubscription_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Tribbler_GetTribblesBySubscription_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Tribbler_GetTribblesBySubscription_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Tribbler_GetTribblesBySubscription_presult__isset {
  _Tribbler_GetTribblesBySubscription_presult__isset() : success(false) {}
  bool success;
} _Tribbler_GetTribblesBySubscription_presult__isset;

class Tribbler_GetTribblesBySubscription_presult {
 public:


  virtual ~Tribbler_GetTribblesBySubscription_presult() throw() {}

  TribbleResponse* success;

  _Tribbler_GetTribblesBySubscription_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Tribbler_GetSubscriptions_args__isset {
  _Tribbler_GetSubscriptions_args__isset() : userid(false) {}
  bool userid;
} _Tribbler_GetSubscriptions_args__isset;

class Tribbler_GetSubscriptions_args {
 public:

  Tribbler_GetSubscriptions_args() : userid() {
  }

  virtual ~Tribbler_GetSubscriptions_args() throw() {}

  std::string userid;

  _Tribbler_GetSubscriptions_args__isset __isset;

  void __set_userid(const std::string& val) {
    userid = val;
  }

  bool operator == (const Tribbler_GetSubscriptions_args & rhs) const
  {
    if (!(userid == rhs.userid))
      return false;
    return true;
  }
  bool operator != (const Tribbler_GetSubscriptions_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Tribbler_GetSubscriptions_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Tribbler_GetSubscriptions_pargs {
 public:


  virtual ~Tribbler_GetSubscriptions_pargs() throw() {}

  const std::string* userid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Tribbler_GetSubscriptions_result__isset {
  _Tribbler_GetSubscriptions_result__isset() : success(false) {}
  bool success;
} _Tribbler_GetSubscriptions_result__isset;

class Tribbler_GetSubscriptions_result {
 public:

  Tribbler_GetSubscriptions_result() {
  }

  virtual ~Tribbler_GetSubscriptions_result() throw() {}

  SubscriptionResponse success;

  _Tribbler_GetSubscriptions_result__isset __isset;

  void __set_success(const SubscriptionResponse& val) {
    success = val;
  }

  bool operator == (const Tribbler_GetSubscriptions_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Tribbler_GetSubscriptions_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Tribbler_GetSubscriptions_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Tribbler_GetSubscriptions_presult__isset {
  _Tribbler_GetSubscriptions_presult__isset() : success(false) {}
  bool success;
} _Tribbler_GetSubscriptions_presult__isset;

class Tribbler_GetSubscriptions_presult {
 public:


  virtual ~Tribbler_GetSubscriptions_presult() throw() {}

  SubscriptionResponse* success;

  _Tribbler_GetSubscriptions_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class TribblerClient : virtual public TribblerIf {
 public:
  TribblerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  TribblerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  TribbleStatus::type CreateUser(const std::string& userid);
  void send_CreateUser(const std::string& userid);
  TribbleStatus::type recv_CreateUser();
  TribbleStatus::type AddSubscription(const std::string& userid, const std::string& subscribeto);
  void send_AddSubscription(const std::string& userid, const std::string& subscribeto);
  TribbleStatus::type recv_AddSubscription();
  TribbleStatus::type RemoveSubscription(const std::string& userid, const std::string& subscribeto);
  void send_RemoveSubscription(const std::string& userid, const std::string& subscribeto);
  TribbleStatus::type recv_RemoveSubscription();
  TribbleStatus::type PostTribble(const std::string& userid, const std::string& tribbleContents);
  void send_PostTribble(const std::string& userid, const std::string& tribbleContents);
  TribbleStatus::type recv_PostTribble();
  void GetTribbles(TribbleResponse& _return, const std::string& userid);
  void send_GetTribbles(const std::string& userid);
  void recv_GetTribbles(TribbleResponse& _return);
  void GetTribblesBySubscription(TribbleResponse& _return, const std::string& userid);
  void send_GetTribblesBySubscription(const std::string& userid);
  void recv_GetTribblesBySubscription(TribbleResponse& _return);
  void GetSubscriptions(SubscriptionResponse& _return, const std::string& userid);
  void send_GetSubscriptions(const std::string& userid);
  void recv_GetSubscriptions(SubscriptionResponse& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TribblerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<TribblerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TribblerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_CreateUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddSubscription(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RemoveSubscription(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PostTribble(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTribbles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTribblesBySubscription(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetSubscriptions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TribblerProcessor(boost::shared_ptr<TribblerIf> iface) :
    iface_(iface) {
    processMap_["CreateUser"] = &TribblerProcessor::process_CreateUser;
    processMap_["AddSubscription"] = &TribblerProcessor::process_AddSubscription;
    processMap_["RemoveSubscription"] = &TribblerProcessor::process_RemoveSubscription;
    processMap_["PostTribble"] = &TribblerProcessor::process_PostTribble;
    processMap_["GetTribbles"] = &TribblerProcessor::process_GetTribbles;
    processMap_["GetTribblesBySubscription"] = &TribblerProcessor::process_GetTribblesBySubscription;
    processMap_["GetSubscriptions"] = &TribblerProcessor::process_GetSubscriptions;
  }

  virtual ~TribblerProcessor() {}
};

class TribblerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TribblerProcessorFactory(const ::boost::shared_ptr< TribblerIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TribblerIfFactory > handlerFactory_;
};

class TribblerMultiface : virtual public TribblerIf {
 public:
  TribblerMultiface(std::vector<boost::shared_ptr<TribblerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TribblerMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TribblerIf> > ifaces_;
  TribblerMultiface() {}
  void add(boost::shared_ptr<TribblerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  TribbleStatus::type CreateUser(const std::string& userid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CreateUser(userid);
    }
    return ifaces_[i]->CreateUser(userid);
  }

  TribbleStatus::type AddSubscription(const std::string& userid, const std::string& subscribeto) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddSubscription(userid, subscribeto);
    }
    return ifaces_[i]->AddSubscription(userid, subscribeto);
  }

  TribbleStatus::type RemoveSubscription(const std::string& userid, const std::string& subscribeto) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RemoveSubscription(userid, subscribeto);
    }
    return ifaces_[i]->RemoveSubscription(userid, subscribeto);
  }

  TribbleStatus::type PostTribble(const std::string& userid, const std::string& tribbleContents) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PostTribble(userid, tribbleContents);
    }
    return ifaces_[i]->PostTribble(userid, tribbleContents);
  }

  void GetTribbles(TribbleResponse& _return, const std::string& userid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTribbles(_return, userid);
    }
    ifaces_[i]->GetTribbles(_return, userid);
    return;
  }

  void GetTribblesBySubscription(TribbleResponse& _return, const std::string& userid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTribblesBySubscription(_return, userid);
    }
    ifaces_[i]->GetTribblesBySubscription(_return, userid);
    return;
  }

  void GetSubscriptions(SubscriptionResponse& _return, const std::string& userid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetSubscriptions(_return, userid);
    }
    ifaces_[i]->GetSubscriptions(_return, userid);
    return;
  }

};

} // namespace

#endif
