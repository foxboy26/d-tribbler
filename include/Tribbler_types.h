/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Tribbler_TYPES_H
#define Tribbler_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace Tribbler {

struct TribbleStatus {
  enum type {
    OK = 1,
    EEXISTS = 2,
    INVALID_USER = 3,
    INVALID_SUBSCRIBETO = 4,
    NOT_IMPLEMENTED = 5,
    STORE_FAILED = 6,
    INTERNAL_FAILURE = 7
  };
};

extern const std::map<int, const char*> _TribbleStatus_VALUES_TO_NAMES;

typedef struct _Tribble__isset {
  _Tribble__isset() : userid(false), posted(false), contents(false) {}
  bool userid;
  bool posted;
  bool contents;
} _Tribble__isset;

class Tribble {
 public:

  static const char* ascii_fingerprint; // = "65EFF36B45A2A15ED500CE77FF0EDE94";
  static const uint8_t binary_fingerprint[16]; // = {0x65,0xEF,0xF3,0x6B,0x45,0xA2,0xA1,0x5E,0xD5,0x00,0xCE,0x77,0xFF,0x0E,0xDE,0x94};

  Tribble() : userid(), contents() {
  }

  virtual ~Tribble() throw() {}

  std::string userid;
  std::vector<int64_t>  posted;
  std::string contents;

  _Tribble__isset __isset;

  void __set_userid(const std::string& val) {
    userid = val;
  }

  void __set_posted(const std::vector<int64_t> & val) {
    posted = val;
  }

  void __set_contents(const std::string& val) {
    contents = val;
  }

  bool operator == (const Tribble & rhs) const
  {
    if (!(userid == rhs.userid))
      return false;
    if (!(posted == rhs.posted))
      return false;
    if (!(contents == rhs.contents))
      return false;
    return true;
  }
  bool operator != (const Tribble &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Tribble & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Tribble &a, Tribble &b);

typedef struct _TribbleResponse__isset {
  _TribbleResponse__isset() : tribbles(false), status(false) {}
  bool tribbles;
  bool status;
} _TribbleResponse__isset;

class TribbleResponse {
 public:

  static const char* ascii_fingerprint; // = "EE7AB766979BE7A96DC3788F2ABC0A1B";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0x7A,0xB7,0x66,0x97,0x9B,0xE7,0xA9,0x6D,0xC3,0x78,0x8F,0x2A,0xBC,0x0A,0x1B};

  TribbleResponse() : status((TribbleStatus::type)0) {
  }

  virtual ~TribbleResponse() throw() {}

  std::vector<Tribble>  tribbles;
  TribbleStatus::type status;

  _TribbleResponse__isset __isset;

  void __set_tribbles(const std::vector<Tribble> & val) {
    tribbles = val;
  }

  void __set_status(const TribbleStatus::type val) {
    status = val;
  }

  bool operator == (const TribbleResponse & rhs) const
  {
    if (!(tribbles == rhs.tribbles))
      return false;
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const TribbleResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TribbleResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TribbleResponse &a, TribbleResponse &b);

typedef struct _SubscriptionResponse__isset {
  _SubscriptionResponse__isset() : subscriptions(false), status(false) {}
  bool subscriptions;
  bool status;
} _SubscriptionResponse__isset;

class SubscriptionResponse {
 public:

  static const char* ascii_fingerprint; // = "86398F2299656EAB855B1FD290A7B0C1";
  static const uint8_t binary_fingerprint[16]; // = {0x86,0x39,0x8F,0x22,0x99,0x65,0x6E,0xAB,0x85,0x5B,0x1F,0xD2,0x90,0xA7,0xB0,0xC1};

  SubscriptionResponse() : status((TribbleStatus::type)0) {
  }

  virtual ~SubscriptionResponse() throw() {}

  std::vector<std::string>  subscriptions;
  TribbleStatus::type status;

  _SubscriptionResponse__isset __isset;

  void __set_subscriptions(const std::vector<std::string> & val) {
    subscriptions = val;
  }

  void __set_status(const TribbleStatus::type val) {
    status = val;
  }

  bool operator == (const SubscriptionResponse & rhs) const
  {
    if (!(subscriptions == rhs.subscriptions))
      return false;
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const SubscriptionResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SubscriptionResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SubscriptionResponse &a, SubscriptionResponse &b);

} // namespace

#endif
